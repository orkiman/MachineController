#include "io/PCI7248IO.h"
#include <iostream>
#include <chrono>
#include <thread>
#include "Logger.h"

using namespace std::chrono;

PCI7248IO::PCI7248IO(EventQueue<EventVariant>* eventQueue, const Config& config)
    : eventQueue_(eventQueue), config_(config), card_(-1)
{
    inputChannels_ = config_.getInputs();
    outputChannels_ = config_.getOutputs();
}

PCI7248IO::~PCI7248IO()
{
    resetConfiguredOutputPorts();
    stopPolling_ = true;
    if (pollingThread_.joinable())
        pollingThread_.join();
    if (card_ >= 0)
        Release_Card(card_);
}

bool PCI7248IO::initialize()
{
    if (!config_.isPci7248ConfigurationValid()) {
        std::cerr << "Invalid PCI7248 configuration." << std::endl;
        return false;
    }
    
    card_ = Register_Card(PCI_7248, 0);
    if (card_ < 0) {
        std::cerr << "Failed to register PCI-7248! Error Code: " << card_ << std::endl;
        return false;
    }
    
    portsConfig_ = config_.getPci7248IoPortsConfiguration();

    // Helper: Configure a port.
    auto configurePort = [this](const std::string &port, int channelConstant) -> bool {
        auto it = portsConfig_.find(port);
        if (it == portsConfig_.end()) {
            std::cerr << "No configuration found for Port " << port << "." << std::endl;
            return false;
        }
        int type = (it->second == "output") ? OUTPUT_PORT : INPUT_PORT;
        if (DIO_PortConfig(card_, channelConstant, type) != 0) {
            std::cerr << "Failed to configure Port " << port << " as " << it->second << "." << std::endl;
            return false;
        }
        return true;
    };

    // Configure all four ports.
    if (!configurePort("A", Channel_P1A) ||
        !configurePort("B", Channel_P1B) ||
        !configurePort("CL", Channel_P1CL) ||
        !configurePort("CH", Channel_P1CH))
    {
        return false;
    }
    
    std::cout << "PCI7248IO initialized successfully." << std::endl;

    // Helper: Set the ioPort field based on the pin number.
    auto setIOPort = [](IOChannel &channel) {
        if (channel.pin < 8)
            channel.ioPort = "A";
        else if (channel.pin < 16)
            channel.ioPort = "B";
        else if (channel.pin < 20)
            channel.ioPort = "CL";
        else
            channel.ioPort = "CH";
    };

    for (auto &pair : inputChannels_)
        setIOPort(pair.second);
    for (auto &pair : outputChannels_)
        setIOPort(pair.second);

    // Mapping from port identifier to DASK channel constant.
    std::unordered_map<std::string, int> portToChannel = {
        {"A",  Channel_P1A},
        {"B",  Channel_P1B},
        {"CL", Channel_P1CL},
        {"CH", Channel_P1CH}
    };

    // Helper: Read the initial state from a port if it is configured as input.
    auto readInitialState = [this, &portToChannel](const std::string &port) {
        auto configIt = portsConfig_.find(port);
        if (configIt == portsConfig_.end() || configIt->second != "input")
            return;
        auto chIt = portToChannel.find(port);
        if (chIt == portToChannel.end()) {
            std::cerr << "Port " << port << " is not recognized for initial state read." << std::endl;
            return;
        }
        int baseOffset = getPortBaseOffset(port);
        U32 portValue = 0;
        if (DI_ReadPort(card_, chIt->second, &portValue) == 0) {
            portValue = ~portValue; // active-low inversion.
            for (auto &pair : inputChannels_) {
                IOChannel &channel = pair.second;
                if (channel.ioPort == port) {
                    channel.state = (portValue >> (channel.pin - baseOffset)) & 0x1;
                }
            }
        }
        else {
            std::cerr << "Failed to read initial state from Port " << port << "." << std::endl;
        }
    };

    // Read state for every port in the configuration.
    for (const auto &entry : portsConfig_)
        readInitialState(entry.first);

    // Print configured channels.
    for (const auto &pair : inputChannels_) {
        const IOChannel &ch = pair.second;
        std::cout << "Configured input: " << ch.name << " (port " << ch.ioPort 
                  << ", pin " << ch.pin << ")" << std::endl;
    }
    for (const auto &pair : outputChannels_) {
        const IOChannel &ch = pair.second;
        std::cout << "Configured output: " << ch.name << " (port " << ch.ioPort 
                  << ", pin " << ch.pin << ")" << std::endl;
    }

    if (!resetConfiguredOutputPorts()) {
        std::cerr << "Failed to reset configured output ports." << std::endl;
        return false;
    }

    stopPolling_ = false;
    pollingThread_ = std::thread(&PCI7248IO::pollLoop, this);
    return true;
}

const std::unordered_map<std::string, IOChannel>& PCI7248IO::getOutputChannels() const
{
    return outputChannels_;
}

std::unordered_map<std::string, IOChannel> PCI7248IO::getInputChannelsSnapshot() const
{
    return inputChannels_;
}

bool PCI7248IO::writeOutputs(const std::unordered_map<std::string, IOChannel>& newOutputsState)
{
    std::unordered_map<std::string, int> portToChannel = {
        {"A",  Channel_P1A},
        {"B",  Channel_P1B},
        {"CL", Channel_P1CL},
        {"CH", Channel_P1CH}
    };

    std::unordered_map<std::string, U32> portAggregates;
    for (const auto &entry : portToChannel)
        portAggregates[entry.first] = 0;

    for (const auto &pair : newOutputsState) {
        const IOChannel &channel = pair.second;
        if (channel.type != IOType::Output)
            continue;
        int baseOffset = getPortBaseOffset(channel.ioPort);
        int bitPos = channel.pin - baseOffset;
        if (channel.state != 0)
            portAggregates[channel.ioPort] |= (1 << bitPos);
    }

    bool overallSuccess = true;
    for (const auto &p : portAggregates) {
        if (portsConfig_[p.first] != "output")
            continue;
        const std::string &port = p.first;
        // Apply active-low inversion and mask to 8 bits.
        U32 aggregatedValue = ~p.second & 0xFF;
        auto it = portToChannel.find(port);
        if (it != portToChannel.end()) {
            if (DO_WritePort(card_, it->second, aggregatedValue) != 0) {
                getLogger()->error("Failed to write to Port {}", port);
                overallSuccess = false;
            }
        }
        else {
            getLogger()->error("No DASK channel defined for Port {}", port);
            overallSuccess = false;
        }
    }
    
    return overallSuccess;
}

void PCI7248IO::stopPolling()
{
    stopPolling_ = true;
    if (pollingThread_.joinable())
        pollingThread_.join();
}

void PCI7248IO::pollLoop()
{
    SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_TIME_CRITICAL);
    getLogger()->debug("THREAD_PRIORITY_TIME_CRITICAL");

    std::unordered_map<std::string, int> portToChannel = {
        {"A",  Channel_P1A},
        {"B",  Channel_P1B},
        {"CL", Channel_P1CL},
        {"CH", Channel_P1CH}
    };

    using clock = std::chrono::steady_clock;
    auto statStart = clock::now();
    long long totalTime = 0, minTime = std::numeric_limits<long long>::max(), maxTime = 0;
    size_t iterations = 0, longRuns = 0;

    while (!stopPolling_) {
        auto loopStart = clock::now();
        bool anyChange = false;
        
        // Process only input ports.
        for (const auto &entry : portsConfig_) {
            const std::string &port = entry.first;
            if (entry.second != "input")
                continue;
            
            auto it = portToChannel.find(port);
            if (it == portToChannel.end()) {
                std::cerr << "Port " << port << " is not recognized." << std::endl;
                continue;
            }
            
            U32 portValue = 0;
            if (DI_ReadPort(card_, it->second, &portValue) == 0) {
                portValue = ~portValue;
                int baseOffset = getPortBaseOffset(port);
                for (auto &pair : inputChannels_) {
                    IOChannel &channel = pair.second;
                    if (channel.ioPort == port) {
                        int newState = (portValue >> (channel.pin - baseOffset)) & 0x1;
                        if (newState != channel.state) {
                            channel.eventType = (channel.state == 0 && newState == 1) ? IOEventType::Rising :
                                                 (channel.state == 1 && newState == 0) ? IOEventType::Falling :
                                                 IOEventType::None;
                            anyChange = true;
                            channel.state = newState;
                        }
                        else {
                            channel.eventType = IOEventType::None;
                        }
                    }
                }
            }
            else {
                std::cerr << "Failed to read Port " << port << " in pollLoop." << std::endl;
            }
        }
        if (anyChange)
            pushStateEvent();

        auto loopEnd = clock::now();
        auto execTime = std::chrono::duration_cast<std::chrono::microseconds>(loopEnd - loopStart).count();
        if (execTime < 1000) {
            preciseSleep(1000 - execTime);
            auto loopEndAfterSleep = clock::now();
            execTime = std::chrono::duration_cast<std::chrono::microseconds>(loopEndAfterSleep - loopStart).count();
        }
        totalTime += execTime;
        minTime = std::min(minTime, execTime);
        maxTime = std::max(maxTime, execTime);
        if (execTime > 5000)
            longRuns++;
        iterations++;

        auto now = clock::now();
        if (std::chrono::duration_cast<std::chrono::seconds>(now - statStart).count() >= 1) {
            double avgTime = static_cast<double>(totalTime) / iterations;
            getLogger()->debug("Poll Loop Execution Time (microseconds) -- Min: " + std::to_string(minTime) +
                                ", Max: " + std::to_string(maxTime) +
                                ", Avg: " + std::to_string(avgTime) +
                                ", long runs: " + std::to_string(longRuns));
            statStart = now;
            totalTime = 0;
            minTime = std::numeric_limits<long long>::max();
            maxTime = 0;
            iterations = 0;
            longRuns = 0;
        }
    }
    getLogger()->flush();
}

void PCI7248IO::pushStateEvent()
{
    if (eventQueue_) {
        IOEvent event;
        event.channels = inputChannels_;
        eventQueue_->push(event);
    }
}

int PCI7248IO::getPortBaseOffset(const std::string &port) const
{
    if (port == "A")
        return 0;
    if (port == "B")
        return 8;
    if (port == "CL")
        return 16;
    if (port == "CH")
        return 20;
    return 0;
}

void PCI7248IO::preciseSleep(int microseconds)
{
    HANDLE timer = CreateWaitableTimer(NULL, TRUE, NULL);
    if (!timer)
        return;
    LARGE_INTEGER dueTime;
    dueTime.QuadPart = -static_cast<LONGLONG>(microseconds) * 10LL;
    SetWaitableTimer(timer, &dueTime, 0, NULL, NULL, FALSE);
    WaitForSingleObject(timer, INFINITE);
    CloseHandle(timer);
}

bool PCI7248IO::resetConfiguredOutputPorts()
{
    bool overallSuccess = true;
    std::unordered_map<std::string, int> portToChannel = {
        {"A",  Channel_P1A},
        {"B",  Channel_P1B},
        {"CL", Channel_P1CL},
        {"CH", Channel_P1CH}
    };

    for (const auto &entry : portsConfig_) {
        const std::string &port = entry.first;
        if (entry.second != "output")
            continue;
        auto it = portToChannel.find(port);
        if (it != portToChannel.end()) {
            U32 outValue = (~static_cast<U32>(0)) & 0xFF; // default "off" state.
            if (DO_WritePort(card_, static_cast<U16>(it->second), outValue) != 0) {
                getLogger()->error("Failed to reset output Port {}", port);
                overallSuccess = false;
            }
            else {
                getLogger()->debug("Reset output Port {} to value 0x{:X}", port, outValue);
            }
        }
        else {
            getLogger()->error("No DASK channel mapping for output Port {}", port);
            overallSuccess = false;
        }
    }
    return overallSuccess;
}
